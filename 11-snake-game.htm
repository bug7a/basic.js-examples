<!DOCTYPE html>
<html>
    <head>

        <title>Snake Game</title>
        
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">

        <link rel="stylesheet" type="text/css" href="basic/basic.min.css">
        <script src="basic/basic.min.js" type="text/javascript" charset="utf-8"></script>

        <script>
        
        /*
        
        ALGORİTMA:
        
        - Eski telefonlardan bildiğimiz yılan oyununun benzeri.
        
        */

        // Sabit sayılar
        var HORIZONTAL_SQUARE_NUMBER = 28
        var VERTICAL_SQUARE_NUMBER = 23

        // Not: Hepsinin büyük harf ile yazılması, 
        // içeriğin sabit olduğunu belirten bir yazım tekniğidir.
        
        // Puan gösterme alanı.
        var lblScoreTitle
        var lblScore
        
        // Yön düğmeleri. (Resim nesnesi olacak.)
        var imgUp
        var imgDown
        var imgRight
        var imgLeft
        
        // Ekrandaki her bir kare.
        var squares
        
        // Yılanın hareket yönünü.
        // yukarı, aşağı, sağ, sol olabilir.
        var direction = "sağ"

        // Yılanın hangi renk olacağı.
        var snakeColor = "tomato"

        // Yılanı oluşturan noktaların listesi.
        // Bilgi: başlangıçta 3 noktadan oluşuyor.
        var points = [
            
            {x: 4, y: 2},
            {x: 3, y: 2},
            {x: 2, y: 2}
            
        ]
        
        // İlk çalışan fonksiyon.
        var start = function() {
            
            // Sayfanın arka plan rengini belirle.
            page.color = "tomato"
            
            // loop() fonksiyonu tekrarlanma zamanı 250ms olsun.
            setLoopTimer(250)
            
            // Puan Başlığı Etiketi. Parametreler: left, top
            lblScoreTitle = createLabel(360, 40)
            that.text = "<b>Score</b>"
            that.textAlign = "center"
            that.textColor = "black"
            // Yükseklik verilmezse, aline() fonksiyonu altını hesaplayamaz.
            that.height = 28
            
            // Puan Etiketi
            lblScore = createLabel()
            that.text = "0"
            that.textAlign = "center"
            that.textColor = "black"
            // lblScoreTitle nesnesinin altına, boşluk bırakmadan hizala.
            that.aline(lblScoreTitle, "bottom")
            
            // Yön tuşlarını oluştur.

            // Aşağı düğme (resim nesnesi). Parametreler: left, top, width, height
            imgDown = createImage(455, 650, 50, 50)
            that.value = "aşağı"
            that.load("images/asagi-ok.png")
            that.onClick(yonDegistir)

            // Not: Diğer resim nesneleri, imgDown nesnesine göre hizalanıyor.
            
            // Yukarı düğme.
            imgUp = createImage()
            that.value = "yukarı"
            that.load("images/yukari-ok.png")
            that.width = 50
            that.height = 50
            // imgDown resminin, 5px üstüne hizala.
            that.aline(imgDown, "top", 5)
            that.onClick(yonDegistir)
            
            // Sağ düğme.
            imgRight = createImage()
            that.value = "sağ"
            that.load("images/sag-ok.png")
            that.width = 50
            that.height = 50
            // imgDown resminin, 5px sağına hizala.
            that.aline(imgDown, "right", 5)
            that.onClick(yonDegistir)
            
            // Sol düğme.
            imgLeft = createImage()
            that.value = "sol"
            that.load("images/sol-ok.png")
            that.width = 50
            that.height = 50
            // imgDown resminin, 5px soluna hizala.
            that.aline(imgDown, "left", 5)
            that.onClick(yonDegistir)
            
            
            // Yılanın, hareket edeceği kareleri oluştur (28x23)
            
            // Boş bir nesne oluştur.
            // Oluşturulan tüm kareler, bu nesneye eklenecek.
            squares = {}
            
            // Dikey ve yatay kare sayısı kadar tekrar et.
            for (var y = 1; y <= VERTICAL_SQUARE_NUMBER; y++) {
                for (var x = 1; x <= HORIZONTAL_SQUARE_NUMBER; x++) {

                    // karenin konumu ile, bir anahtar oluştur.
                    var key = x + "-" + y
                    
                    // Her bir kareyi, anahtar ile sakla.
                    squares[key] = createBox()
                    that.height = 19
                    that.width = 19
                    that.left = x * 20
                    that.top = 100 + (y * 20)
                    that.border = 0
                    // Tüm kareleri önce beyaza boya,
                    that.color = "white"

                    // Ama eğer, sınırlar boyanıyor ise, siyah olsun.
                    if (x == 1) { 
                        that.color = "black"
                    } else if (x == HORIZONTAL_SQUARE_NUMBER) { 
                        that.color = "black"
                    }

                    if (y == 1) { 
                        that.color = "black"
                    } else if (y == VERTICAL_SQUARE_NUMBER) { 
                        that.color = "black"
                    }
                    
                }
            }
            
            // Başlangıçta, yılanı çiz.
            for (var i = 0; i < points.length; i++) {

                // Noktalar dizisindeki konumları boya
                paintSquare(points[i].x, points[i].y, snakeColor)

            }   
            
            // Başlangıçta, bir adet yem ekle.
            addBait()
            
        }
        
        // Her saniye çalışan fonksiyon.
        var loop = function(){
            
            // Yılan her saniye, bir birim ilerlesin.
            moveForward()
            
        }

        // Yılanı, bir birim hareket ettiren fonksiyon.
        var moveForward = function() {

            // Çalışma mantığı: yılanın sonundan bir kare sil ve
            // yılanın ilerleyeceği yönde yeni bir kare oluştur.

            // 1. siyah kare ile karşılaşırsa, hiç bir işlem yapma.
            // 2. turuncu kare ile karşılaşırsa, al ve yılanı uzat.
            // 3. beyaz kare ile karşılaşırsa, yoluna devam et.

            // Yılanın ilerleyeceği sonraki konumu taşıyan değişkenler.
            var newX = 0
            var newY = 0

            // Yılanın bir sonraki konumunu hesapla, değişkenlerde sakla.
            if (direction == "sağ") {
                newX = points[0].x + 1
                newY = points[0].y
                
            } else if (direction == "sol") {
                newX = points[0].x - 1
                newY = points[0].y
                
            } else if (direction == "aşağı") {
                newX = points[0].x
                newY = points[0].y + 1
                
            } else if (direction == "yukarı") {
                newX = points[0].x
                newY = points[0].y - 1
                
            }
            
            // Yılanın sonraki konumunun rengini değişkene aktar.
            var nextSquareColor = squareWhatColor(newX, newY)
            
            // Eğer sonraki konum beyaz ise,
            if (nextSquareColor == "white") {
                
                // UZAMADAN yeni konuma ilerle.
                paintAndUpdate(newX, newY, 0)
                
            } else if (nextSquareColor == "black")  {
                
                // Hiç bir şey yapma, oyun bitti.
                
                // Sorun: Yılan, siyah bir kare ile karşılaştıktan sonra,
                // istenildiği zaman yön tuşları ile oyuna devam edilebilir.
                // Bu sorun düzeltilmeli.
                
            } else if (nextSquareColor == "gold") {
                
                // Yemi yuttun, UZAYARAK yeni konuma ilerle.
                paintAndUpdate(newX, newY, 1)
                // Yeni bir yem oluştur.
                addBait()
                // skor tablosunu 1 arttır.
                increaseScore()
                
            }
            
            // Sorun: Hareket eden yılan kendi ile karşılaştığında,
            // oyun devam etmemeli. Bu sorun düzeltilmeli.

        }
        
        // Yılanın yeni konumunu boya ve noktalar dizisini güncelle.
        var paintAndUpdate = function(pYeniX, pYeniY, pUzat) {
            
            // Eğer yılan UZAMADAN ilerleyecek ise,
            if (pUzat == 0) {
                
                // Not: Eğer bu kare temizleme ve silme işlemi yapılmaz ise
                // yılan bir birim uzun kalacaktır.
                
                // Yılanın son noktasını, nokta listesinden öğren
                // ve ekranda bu noktayı beyaz ile boya
                paintSquare(points[points.length - 1].x, points[points.length - 1].y, "white")

                // Yılanın son noktasını, nokta listesinden sil.
                points.pop()
                
            }

            // Yılanın sonraki konumunu boya.
            paintSquare(pYeniX, pYeniY, snakeColor)

            // Yılanın nokta listesinin başına,
            // yeni noktanın koordinatlarını ekle.
            points.unshift({x: pYeniX, y: pYeniY})
            
        }
        
        // Yılanın yönünü değiştirir.
        var yonDegistir = function(basilanDugme) {
            
            // Yön bilgisini, basılan düğmenin .value özelliğinden al.
            direction = basilanDugme.value

        }
        
        // Rasgele konumda, yeni bir yem oluşturur.
        var addBait = function() {
            
            // Rasgele bir konum seç. (Kenarlar hariç)
            var x = random(2, HORIZONTAL_SQUARE_NUMBER - 1)
            var y = random(2, VERTICAL_SQUARE_NUMBER - 1)
            
            // Sorun: Rasgele seçilen yem koordinatları, düşük bir olasılık ile
            // yılanın üzerinde çıkabilir. Bu sorun düzeltilmeli.
            // Kontrol edilmeli ve gerekirse tekar, tekrar yeni koordinat üretilmeli.
            
            // Rasgele üretilmiş konumu turuncuya boya.
            paintSquare(x, y, "gold")
            
        }
        
        // Not: Kendi, kareBoya fonksiyonumuzu yazalım.
        var paintSquare = function(pX, pY, pRenk) {

            // Karenin, anahtarını oluştur.
            var key = pX + "-" + pY
            
            squares[key].color = pRenk
            
        }
        
        // Not: Kendi kareNeRenk fonksiyonumuzu yazalım.
        var squareWhatColor = function(pX, pY) {

            // Karenin, anahtarını oluştur.
            var key = pX + "-" + pY
            
            return squares[key].color
            
        }
        
        // Skoru attırır.
        var increaseScore = function() {
            
            // Etiketin, metnini sayıya çevir ve bir ile topla.
            lblScore.text = num(lblScore.text) + 1
            
        }
            
        </script>

    </head>
    <body></body>
</html>